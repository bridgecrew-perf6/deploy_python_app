## Дано:
Stateless Веб-приложение на Python3 из одного py файла с простым кодом, которое выводит текущую дату:<br>
#!/usr/bin/env python3
import datetime
def do_magic():
    now = datetime.datetime.now()
    return "Hello! {0}".format(now)
if __name__ == "__main__":
    print(do_magic())
https://github.com/summerinstockholm/hello_world_devops
Ubuntu Server установленный на виртуальную машину VMWare со статическим IP:
catware@srvubuntu:\~$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 20.04.4 LTS
Release:        20.04
Codename:       focal
**Ко всему этому попытаюсь применить DevOps практики на самом базовом и начальном уровне.**
## Проверим версию git и python, пропишем глобальные настройки для гита (email, username), выполним клонирование репозитория с кодом, а затем добавим URL
адрес удаленного репозитория с кредами (username/github access token).
catware@srvubuntu:~$ git --version
git version 2.25.1
catware@srvubuntu:~$ python3 --version
Python 3.8.10
Объясняем гиту кто я такой:
catware@srvubuntu:~$ git config --global user.email "ammirosat@yandex.ru"
catware@srvubuntu:~$ git config --global user.name "Vladimir Poroshkov"
catware@srvubuntu:~$ git config --global -l
user.email=ammirosat@yandex.ru
user.name=Vladimir Poroshkov
Клонируем репозиторий:
catware@srvubuntu:~$ git clone https://github.com/summerinstockholm/hello_world_devops.git
Cloning into 'hello_world_devops'...
remote: Enumerating objects: 23, done.
remote: Counting objects: 100% (23/23), done.
remote: Compressing objects: 100% (18/18), done.
remote: Total 23 (delta 5), reused 21 (delta 3), pack-reused 0
Unpacking objects: 100% (23/23), 4.20 KiB | 91.00 KiB/s, done.
Добавляем url адрес удаленного репозитория:
catware@srvubuntu:~/hello_world_devops$ git remote set-url origin https://summerinstockholm:<GITHUBACCESSTOKEN>@github.com/summerinstockholm/hello_world_devops.git
## Выдадим права на исполнение для app.py (чтобы иметь возможность проверять локально перед его выкаткой), запустим приложение, потом отредактируем файл README, 
закоммитим и запушим в ветку мастер удаленного репозитория где хранится приложение:
Смотрим права app.py:
catware@srvubuntu:~/hello_world_devops$ ls -la app.py
-rw-rw-r-- 1 catware catware 442 мар 17 12:02 app.py
Выдаем права на исполнение:
catware@srvubuntu:~/hello_world_devops$ chmod +x app.py
catware@srvubuntu:~/hello_world_devops$ ls -la app.py
-rwxrwxr-x 1 catware catware  442 мар 17 12:02 app.py
Запускаем приложение:
catware@srvubuntu:~/hello_world_devops$ ./app.py
Hello! 2022-03-17 12:16:29.604861
Приложение работает!
Отредактируем файл README вставив в них ссылки на этот репозиторий и репозиторий с кодом:
catware@srvubuntu:~/hello_world_devops$ sudo nano README
https://github.com/summerinstockholm/deploy_python_app/
https://github.com/summerinstockholm/hello_world_devops
Ctr+O, Ctr+X.
Добавляем измененный файл, коммитим и пушим:
catware@srvubuntu:~/hello_world_devops$ git add .
catware@srvubuntu:~/hello_world_devops$ git commit -m "add link into README file"
[master feaad7e] add link into README file
 2 files changed, 2 insertions(+), 1 deletion(-)
 mode change 100644 => 100755 app.py
catware@srvubuntu:~/hello_world_devops$ git push origin master
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 2 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 405 bytes | 405.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To https://github.com/summerinstockholm/hello_world_devops.git
   52c11a5..feaad7e  master -> master
## Мы же делаем веб-приложение! Теперь нужно чтобы приложение исполнялось в браузере. Пойдет от старого к самому новому.
Сначала сделаем исполнение нашего приложения как CGI скрипта веб-сервером Apache. Установим Apache:
catware@srvubuntu:~/hello_world_devops$ sudo apt install apache2
Установится apache. Apache ожидает что он будет сбрасывать файлы которые у него будут в определенную директорию. Она называется /var/www/html
Там пока ничего нет:
catware@srvubuntu:~/hello_world_devops$ ls -la /var/www/html
total 20
drwxr-xr-x 2 root root  4096 мар 17 12:37 .
drwxr-xr-x 3 root root  4096 мар 17 12:37 ..
-rw-r--r-- 1 root root 10918 мар 17 12:37 index.html
Но проверить что все взлетело можно открыв в браузере IP адрес виртуальной машины:
https://prnt.sc/MSA7yTVkkyeA
Идем в /var/www и перенесем директорию html в html2:
catware@srvubuntu:~/hello_world_devops$ cd /var/www
catware@srvubuntu:/var/www$ ls -la
total 12
drwxr-xr-x  3 root root 4096 мар 17 12:37 .
drwxr-xr-x 14 root root 4096 мар 17 12:37 ..
drwxr-xr-x  2 root root 4096 мар 17 12:37 html
catware@srvubuntu:/var/www$ sudo mv html html2
catware@srvubuntu:/var/www$ ls -la
total 12
drwxr-xr-x  3 root root 4096 мар 17 12:47 .
drwxr-xr-x 14 root root 4096 мар 17 12:37 ..
drwxr-xr-x  2 root root 4096 мар 17 12:37 html2
Направим директорию html на домашнюю директорию где лежит веб-приложение:
catware@srvubuntu:/var/www$ sudo ln -s ~/hello_world_devops html
catware@srvubuntu:/var/www$ ls -la
total 12
drwxr-xr-x  3 root root 4096 мар 17 12:50 .
drwxr-xr-x 14 root root 4096 мар 17 12:37 ..
lrwxrwxrwx  1 root root   32 мар 17 12:50 html -> /home/catware/hello_world_devops
drwxr-xr-x  2 root root 4096 мар 17 12:37 html2
То есть теперь апач по симлинку будет бежать в домашний каталог в папку где лежит приложение.
Но просто так конечно апач ничего не будет запускать.
Нужно включить модуль отвечающий за выполнение внешних скриптов модуль апача:
catware@srvubuntu:/var/www$ sudo a2enmod cgi
Your MPM seems to be threaded. Selecting cgid instead of cgi.
Enabling module cgid.
To activate the new configuration, you need to run:
  systemctl restart apache2
Но не спешим перезапускать апач, потому что нужно добавить возможность переопределять настройки апача путем создания файлов в моей директории с проектами:
catware@srvubuntu:/var/www$ sudo nano /etc/apache2/sites-enabled/000-default.conf
После строчки DocumentRoot /var/www/html вставляем следующую конструкцию:
<Directory /var/www/html>
    AllowOverride All
</Directory>
https://prnt.sc/Wr3GEOpXS_S1
Сохраняем и перезапускаем апач:
catware@srvubuntu:/var/www$ sudo systemctl restart apache2
Делаем специальный файл .htaccess в директории с веб приложением:
catware@srvubuntu:/var/www$ cd ~/hello_world_devops
catware@srvubuntu:~/hello_world_devops$ sudo nano .htaccess
Который позволит переопределять настройки апача налету.
Добавляем в него следующие строки:
AddHandler cgi-script .py
Options +ExecCGI
DirectoryIndex app.py
Перевод:
AddHandler cgi-script .py - если видишь файл с расширением .py это cgi скрипт и его надо исполнить
Options +ExecCGI - разрешаю выполнение скриптов в этой директории
DirectoryIndex app.py - если не сказано иное, в качестве индекса нужно выбирать файл app.py
https://prnt.sc/an_FyilTV8NO
В адресной строке браузера получаем:
https://prnt.sc/MlGTLi4OuLpP
Для исправления этой проблемы необходимо отредактировать файл app.py, вставив в него строчку:
print("Content-type: text/html\n\n") после if __name__ == "__main__":
https://prnt.sc/rXmWmSxjP7Li
Сохранеяем файл, обновляем страницу в браузере получаем:
https://prnt.sc/0U7iLquvlfdQ
## Коммитим и изменения. Но добавляем в коммит только изменения app.py.
catware@srvubuntu:~/hello_world_devops$ git status
On branch master
Your branch is up to date with 'origin/master'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   app.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        .htaccess

no changes added to commit (use "git add" and/or "git commit -a")
catware@srvubuntu:~/hello_world_devops$ git add app.py
catware@srvubuntu:~/hello_world_devops$ git commit -m 'cgi version'
[master db0be86] cgi version
 1 file changed, 2 insertions(+), 1 deletion(-)
## Нужна универсальность. Ведь если исполнять app.py в командной строке то будет мешать Content-type: text/html\n\n
catware@srvubuntu:~/hello_world_devops$ ./app.py
Content-type: text/html
Hello! 2022-03-17 13:21:55.804539

Для этого необходимо отредактировать app.py.
Сначала добавить модуль который позволяет взаимодействовать с операционной системой:
import os
а перед print(do_magic()) необходимо вывести переменный среды которые есть в ОС через функцию print(os.environ), в итоге app.py должен принять вид:
catware@srvubuntu:~/hello_world_devops$ sudo nano app.py
#!/usr/bin/env python3
import datetime
import os
def do_magic():
    now = datetime.datetime.now()
    return "Hello! {0}".format(now)
if __name__ == "__main__":
    print("Content-type: text/html\n\n")
    print(os.environ)
    print(do_magic())
https://prnt.sc/VAELOUi_l1MA
В итоге в браузере получаем огромное количество переменных среды:
https://prnt.sc/k4wNuXCl1hNL
Так же получается если запускать локально:
https://prnt.sc/cj9zPTTeUhyz
Важно понимать что есть переменные которые отображаются если их вызывает веб-сервер apache, например Request_URI.
Тогда можно модифицировать код через условную конструкцию:
#!/usr/bin/env python3
import datetime
import os
def do_magic():
    now = datetime.datetime.now()
    return "Hello! {0}".format(now)
if __name__ == "__main__":
    if 'REQUEST_URI' in os.environ: # В том случае если app.py вызывают через apache то добавляется
        print("Content-type: text/html\n\n")
    print(do_magic())
Т.е. в том случае если app.py вызывают через apache то добавляется то добавляется print("Content-type: text/html\n\n"), а если нет, то не показываем 
Content-type: text/html\n\n.
https://prnt.sc/x2cLIi8HXt9M
Проверяем что работает локально:
catware@srvubuntu:~/hello_world_devops$ ./app.py
Hello! 2022-03-17 13:34:45.483794
Проверяем что работает в браузере:
https://prnt.sc/dYj98dc5JZ5m
## Коммитим, помечаем получившееся как определенную версию и пушим в мастер .htaccess и app.py
catware@srvubuntu:~/hello_world_devops$ git add .
catware@srvubuntu:~/hello_world_devops$ git commit -m "apache2 cgi version"
[master caa7e40] apache2 cgi version
 2 files changed, 6 insertions(+), 1 deletion(-)
 create mode 100644 .htaccess
 catware@srvubuntu:~/hello_world_devops$ git tag v1.0
catware@srvubuntu:~/hello_world_devops$ git push origin master
Enumerating objects: 9, done.
Counting objects: 100% (9/9), done.
Delta compression using up to 2 threads
Compressing objects: 100% (7/7), done.
Writing objects: 100% (7/7), 799 bytes | 399.00 KiB/s, done.
Total 7 (delta 3), reused 0 (delta 0)
remote: Resolving deltas: 100% (3/3), completed with 2 local objects.
To https://github.com/summerinstockholm/hello_world_devops.git
   feaad7e..caa7e40  master -> master
## А что собственно дальше? А дальше попробуем WSGI (whiskey). CGI - прошлый век, на каждый запрос свой процесс.
В качестве софтовой реализации будем использовать uWSGI.
Создадим отдельную ветку.
catware@srvubuntu:~/hello_world_devops$ git checkout -b uwsgi
Switched to a new branch 'uwsgi'
catware@srvubuntu:~/hello_world_devops$ git status
On branch uwsgi
nothing to commit, working tree clean
Для совместимости app.py с стандартном whiskey необходимо изменить приложение:
#!/usr/bin/env python3
import datetime
import os
def do_magic():
    now = datetime.datetime.now()
    return "Hello! {0}".format(now)
def application(env, start_response):
    start_response('200 OK', [('Content-Type', 'text/html')])
    return [do_magic().encode()]
if __name__ == "__main__":
    if 'REQUEST_URI' in os.environ:
        print("Content-type: text/html\n\n")
    print(do_magic())
Функция application описана в стандарте, uwsgi дернет имеено ее когда его попросят запустит app.py.
https://prnt.sc/aKnXaXGYS0RE
Коммитим изменненый файл app.py в ветку uwsgi:
catware@srvubuntu:~/hello_world_devops$ git status
On branch uwsgi
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   app.py

no changes added to commit (use "git add" and/or "git commit -a")
catware@srvubuntu:~/hello_world_devops$ git add app.py
catware@srvubuntu:~/hello_world_devops$ git commit -m "uwsgi version"
[uwsgi 9b3615e] uwsgi version
 1 file changed, 5 insertions(+), 2 deletions(-)
## Установим uwsgi и проверим установку:
catware@srvubuntu:~/hello_world_devops$ sudo apt install uwsgi-plugin-python3 
Проверим установку
catware@srvubuntu:~$ uwsgi
*** Starting uWSGI 2.0.18-debian (64bit) on [Thu Mar 17 15:54:27 2022] ***
compiled with version: 10.0.1 20200405 (experimental) [master revision 0be9efad938:fcb98e4978a:705510a708d3642c9c962beb663c476167e4e8a4] on 11 April 2020 11:15:55
os: Linux-5.4.0-104-generic #118-Ubuntu SMP Wed Mar 2 19:02:41 UTC 2022
nodename: srvubuntu
machine: x86_64
clock source: unix
pcre jit disabled
detected number of CPU cores: 2
current working directory: /home/catware
detected binary path: /usr/bin/uwsgi-core
*** WARNING: you are running uWSGI without its master process manager ***
your processes number limit is 15252
your memory page size is 4096 bytes
detected max file descriptor number: 1024
lock engine: pthread robust mutexes
thunder lock: disabled (you can enable it with --thunder-lock)
The -s/--socket option is missing and stdin is not a socket.
Запускаем веб-приложение через uwsgi:
catware@srvubuntu:~/hello_world_devops$ uwsgi --plugin python3 --http-socket :9090 --wsgi-file app.py
Т.е. запускаем демон uwsgi, прошу подгрузить плагин для python3, прошу запустить веб-сервер на порту 9090 и прошу использовать файл app.py в качестве стартового.
Приложение запуститься на порту 9090
https://prnt.sc/6dDzDVgjGqFx
Однако каждый раз печатать строку uwsgi --plugin python3 --http-socket :9090 --wsgi-file app.py очень утомительно и долго. Воспользуемся возможностью uwsgi тащить
данные из файла. Для этого в каталоге с проектом создадим файл dev.ini со следующими параметрами:
[uwsgi]
plugin=python3
http-socket=:9090
wsgi-file=app.py
https://prnt.sc/Iu9j1CFFdDkL
catware@srvubuntu:~/hello_world_devops$ sudo nano dev.ini
Сохраняем. Теперь можно запустить uwsgi вот так:
catware@srvubuntu:~/hello_world_devops$ uwsgi dev.ini
https://prnt.sc/imIflFr2K6PU
Добавим изменненый файл app.py и новый файл dev.ini в коммит, теперь их можно влить в основную ветку.
catware@srvubuntu:~/hello_world_devops$ git add app.py
catware@srvubuntu:~/hello_world_devops$ git add dev.ini
## Что дальше? uwsgi не круто, так как он не производительный. Будем использовать nginx.
С чего начать?
Выключим apache:
catware@srvubuntu:~/hello_world_devops$ sudo systemctl disable apache2
Synchronizing state of apache2.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install disable apache2
Removed /etc/systemd/system/multi-user.target.wants/apache2.service.
И установим nginx:
catware@srvubuntu:~/hello_world_devops$ sudo apt install nginx
Создадим простой конфигурационный файл который позволит nginx принимать входящие соединения и пробрасывать их на uwsgi 
Переходим в /etc/nginx/sites-enabled
catware@srvubuntu:~/hello_world_devops$ cd /etc/nginx/sites-enabled
Удаляем файлы конфигурации по умолчанию:
catware@srvubuntu:/etc/nginx/sites-enabled$ ls -la
total 8
drwxr-xr-x 2 root root 4096 мар 17 16:30 .
drwxr-xr-x 8 root root 4096 мар 17 16:30 ..
lrwxrwxrwx 1 root root   34 мар 17 16:30 default -> /etc/nginx/sites-available/default
catware@srvubuntu:/etc/nginx/sites-enabled$ sudo rm -rf default
catware@srvubuntu:/etc/nginx/sites-enabled$ ls -la
total 8
drwxr-xr-x 2 root root 4096 мар 17 17:49 .
drwxr-xr-x 8 root root 4096 мар 17 16:30 ..
catware@srvubuntu:/etc/nginx/sites-enabled$ cd ../sites-enabled/
Создаем конфигурационный файл под название hello.conf со следующим содержимым:
catware@srvubuntu:/etc/nginx/sites-enabled$ sudo nano hello.conf
server {
  listen 80;
  root /var/www/html;
  location / {
    include /etc/nginx/uwsgi_params;
    uwsgi_pass 127.0.0.1:9000;
    uwsgi_param Host $host;
    uwsgi_param X-Real-IP $remote_addr;
    uwsgi_param X-Forwarded-For $proxy_add_x_forwarded_for;
    uwsgi_param X-Forwarded-Proto $http_x_forwarded_proto;
  }
}
listen 80 - прошу слушать сервер на 80ом порту
root /var/www/html - использовать в качестве корневой директории
location / - при обращении к корневой директории, я прошу пробрасывать траффик сервера на uwsgi_pass 127.0.0.1:9000 и не просто пробрасывать, а пробрасывать в формате
uwsgi. Там его будет ждать демон uwsgi, будет принимать соединение и отдавать результат своей работы.
https://prnt.sc/M-gsK7b70cuw
Файл сделан в папке /etc/nginx/sites-enabled, это не совсем правильно. Перемещаем и удаляем default файлы конфигурации из /etc/nginx/sites-available, а в 
/etc/nginx/sites-enabled делаем симлинк:
catware@srvubuntu:/etc/nginx/sites-enabled$ sudo mv hello.conf ../sites-available
catware@srvubuntu:/etc/nginx/sites-enabled$ sudo ln -s ../sites-available/hello.conf .
catware@srvubuntu:/etc/nginx/sites-enabled$ ls -la
total 8
drwxr-xr-x 2 root root 4096 мар 17 18:14 .
drwxr-xr-x 8 root root 4096 мар 17 16:30 ..
lrwxrwxrwx 1 root root   29 мар 17 18:14 hello.conf -> ../sites-available/hello.conf
catware@srvubuntu:/etc/nginx/sites-available$ sudo rm -rf default
catware@srvubuntu:/etc/nginx/sites-available$ ls -la
total 12
drwxr-xr-x 2 root root 4096 мар 17 18:11 .
drwxr-xr-x 8 root root 4096 мар 17 16:30 ..
-rw-r--r-- 1 root root  319 мар 17 18:05 hello.conf
Перезапускаем nginx:
catware@srvubuntu:/etc/nginx/sites-enabled$ sudo systemctl restart nginx
Если ругается смотрим ошибки в hello.conf или через sudo netstat -plant | grep 80 кто еще прослушивает порт 80, если слушает апач, стопаем апач через
sudo systemctl stop apache2 и снова перезапускаем nginx.
catware@srvubuntu:/etc/nginx/sites-enabled$ sudo systemctl restart nginx
В браузере получаем 502 т.к. не запущен uwsgi.
https://prnt.sc/Y0fVEcGz6KOn
Переходим в директорию с приложением:
catware@srvubuntu:/etc/nginx/sites-enabled$ cd
catware@srvubuntu:~$ cd hello_world_devops
Настройки которые были для девелопмента теперь не подходят так как до этого эти настройки делались для локального веб-сервера, а веб-сервер уже есть.
Копируем настройки dev.ini в настройки прода prod.ini
catware@srvubuntu:~/hello_world_devops$ cp dev.ini prod.ini
И редактируем настройки prod.ini:
[uwsgi]
plugin=python3
socket=127.0.0.1:9000
wsgi-file=app.py
https://prnt.sc/yzfKaoxHSXdo
catware@srvubuntu:~/hello_world_devops$ sudo nano prod.ini
И запускаем uwsgi с настройками прода:
catware@srvubuntu:~/hello_world_devops$ uwsgi prod.ini
https://prnt.sc/ojFIbh9oCmj0
Все работает!
По итогу получили nginx обрабатывает много запросов, uWSGI умеет вести себя как надо в нужное количество ресурсов!
Появился первый артефакт - конфиг nginx, которая лежит не у нас в проекте, а лежит внутри директорий с nginx.
## Далее нас ждет деплой, предстоит писать не просто код, а инфраструктурный код. То есть код который умеет выкатывать наше приложение.
А также необходимо где-то хранить инфраструктурный код - пока будем хранить код вместе с кодом приложения. (Тут есть свои плюсы и минусы).
Сначала создадим специальную папку deploy c разными поддиректориями apache2, uwsgi, nginx, systemd. 
catware@srvubuntu:~/hello_world_devops$ mkdir -p deploy/{apache2,uwsgi,nginx,systemd}
Удалим index.nginx-debian.html
catware@srvubuntu:~/hello_world_devops$ sudo rm index.nginx-debian.html
Отправим .htaccess в deploy/apache2
catware@srvubuntu:~/hello_world_devops$ mv .htaccess deploy/apache2/
Все ini файлы отправим в deploy/uwsgi:
catware@srvubuntu:~/hello_world_devops$ mv *.ini deploy/uwsgi/
Затем скопируем у nginx из /etc/nginx/sites-available наш hello.conf в deploy/nginx
catware@srvubuntu:~/hello_world_devops$ cp /etc/nginx/sites-available/hello.conf deploy/nginx
catware@srvubuntu:~/hello_world_devops$ ls -la
total 28
drwxrwxr-x 4 catware catware 4096 мар 18 07:51 .
drwxr-xr-x 6 catware catware 4096 мар 17 12:02 ..
-rwxrwxr-x 1 catware catware  681 мар 17 16:14 app.py
drwxrwxr-x 6 catware catware 4096 мар 18 07:46 deploy
drwxrwxr-x 8 catware catware 4096 мар 17 16:14 .git
-rw-rw-r-- 1 catware catware 2761 мар 17 12:02 .gitignore
-rw-rw-r-- 1 catware catware  112 мар 17 12:19 README
Зафиксируем изменения
catware@srvubuntu:~/hello_world_devops$ git add .
catware@srvubuntu:~/hello_world_devops$ git commit -am 'prepare to deploy'
[master f30b89e] prepare to deploy
 4 files changed, 16 insertions(+)
 rename .htaccess => deploy/apache2/.htaccess (100%)
 create mode 100644 deploy/nginx/hello.conf
 rename dev.ini => deploy/uwsgi/dev.ini (100%)
 create mode 100644 deploy/uwsgi/prod.ini
catware@srvubuntu:~/hello_world_devops$ git push origin master
Запушим теги в гит:
catware@srvubuntu:~/hello_world_devops$ git tag
v1.0
catware@srvubuntu:~/hello_world_devops$ git push origin v1.0
Нужно чтобы демон uwsgi автоматически запускался. Для этого поработаем с systemd. Для этого создадим unit файл в /etc/systemd/system/hello.service со
следующим содержимым:
catware@srvubuntu:~/hello_world_devops$ sudo nano /etc/systemd/system/hello.service
[Unit]
Description=Hello app
Requires=network #Здесь описываем что для запуска юнита нужна сеть
After=network.target

[Service]
TimeoutStartSec=0
RestartSec=10
Restart=always
WorkingDirectory=/opt/hello_world_devops #Обратите внимание что рабочая директория создается внутри каталога /opt/
KillSignal=SIGQUIT
Type=notify
NotifyAccess=all
ExecStart=/usr/bin/uwsgi deploy/uwsgi/prod.ini 
#Внутри директории /opt/hello_world_devops нужно запустить uwsgi, а ему необходимо передать параметр где находится ini файл

[Install]
WantedBy=multi-user.target
https://prnt.sc/RyL4UfJOkvmH
Сохраняем. Далее просим systemd перепрочитать изменения с диска чтобы он увидел новый сервис и его можно попробовать стартануть, но это не получится
так как не подготовлена директория /opt/hello_word_devops, там ничего нет.
catware@srvubuntu:~/hello_world_devops$ sudo systemctl daemon-reload
catware@srvubuntu:~/hello_world_devops$ sudo systemctl start hello
Job for hello.service failed because the control process exited with error code.
See "systemctl status hello.service" and "journalctl -xe" for details.
Идет в директорию /opt и становится суперпользователем:
catware@srvubuntu:~/hello_world_devops$ cd /opt
catware@srvubuntu:/opt$ sudo su
И клонируем в эту папку наш репозиторий:
root@srvubuntu:/opt# git clone https://github.com/summerinstockholm/hello_world_devops.git
Cloning into 'hello_world_devops'...
remote: Enumerating objects: 48, done.
remote: Counting objects: 100% (48/48), done.
remote: Compressing objects: 100% (35/35), done.
remote: Total 48 (delta 14), reused 43 (delta 9), pack-reused 0
Unpacking objects: 100% (48/48), 6.58 KiB | 177.00 KiB/s, done.
root@srvubuntu:/opt# ls -la
total 12
drwxr-xr-x  3 root root 4096 мар 18 09:39 .
drwxr-xr-x 19 root root 4096 мар 16 17:07 ..
drwxr-xr-x  4 root root 4096 мар 18 09:39 hello_world_devops
root@srvubuntu:/opt# ls -la hello_world_devops
total 28
drwxr-xr-x 4 root root 4096 мар 18 09:39 .
drwxr-xr-x 3 root root 4096 мар 18 09:39 ..
-rwxr-xr-x 1 root root  681 мар 18 09:39 app.py
drwxr-xr-x 5 root root 4096 мар 18 09:39 deploy
drwxr-xr-x 8 root root 4096 мар 18 09:39 .git
-rw-r--r-- 1 root root 2761 мар 18 09:39 .gitignore
-rw-r--r-- 1 root root  112 мар 18 09:39 README
После этих маниипуляций демон под системд.
Выходим из root'а и стартуем демон
root@srvubuntu:/opt# exit
exit
catware@srvubuntu:/opt$ sudo systemctl start hello
Посмотрим статус:
catware@srvubuntu:/opt$ sudo systemctl status hello
● hello.service - Hello app
     Loaded: loaded (/etc/systemd/system/hello.service; disabled; vendor preset: enabled)
     Active: active (running) since Fri 2022-03-18 09:39:39 UTC; 4min 2s ago
   Main PID: 157607 (uwsgi)
     Status: "uWSGI is ready"
      Tasks: 1 (limit: 4575)
     Memory: 9.4M
     CGroup: /system.slice/hello.service
             └─157607 /usr/bin/uwsgi deploy/uwsgi/prod.ini

мар 18 09:39:39 srvubuntu uwsgi[157607]: your server socket listen backlog is limited to 100 connections
мар 18 09:39:39 srvubuntu uwsgi[157607]: your mercy for graceful operations on workers is 60 seconds
мар 18 09:39:39 srvubuntu uwsgi[157607]: mapped 72920 bytes (71 KB) for 1 cores
мар 18 09:39:39 srvubuntu uwsgi[157607]: *** Operational MODE: single process ***
мар 18 09:39:39 srvubuntu uwsgi[157607]: WSGI app 0 (mountpoint='') ready in 0 seconds on interpreter 0x559f1fdf8b20 pid: 157607 (default app)
мар 18 09:39:39 srvubuntu uwsgi[157607]: uWSGI running as root, you can use --uid/--gid/--chroot options
мар 18 09:39:39 srvubuntu uwsgi[157607]: *** WARNING: you are running uWSGI as root !!! (use the --uid flag) ***
мар 18 09:39:39 srvubuntu uwsgi[157607]: *** uWSGI is running in multiple interpreter mode ***
мар 18 09:39:39 srvubuntu uwsgi[157607]: spawned uWSGI worker 1 (and the only) (pid: 157607, cores: 1)
мар 18 09:39:39 srvubuntu systemd[1]: Started Hello app.
Проверяем в браузере:
https://prnt.sc/8px2GEq4n4gY
Все работает.
Возвращаемся в домашнюю директорию и копируем ранее созданный hello.service в папку deploy/systemd/
catware@srvubuntu:~/hello_world_devops$ ls -la deploy/systemd/
total 12
drwxrwxr-x 2 catware catware 4096 мар 18 09:51 .
drwxrwxr-x 6 catware catware 4096 мар 18 07:46 ..
-rw-r--r-- 1 catware catware  307 мар 18 09:51 hello.service
В итоге сейчас все файлы проекта готовы к деплою на любом сервере, НО необходимо чтобы на сервере было:
* установлен python3
* установлен nginx
* установлен uwsgi
* чтобы файлы в репозитории для настройки были выложены в нужном виде
Зафиксируем изменения в git:
catware@srvubuntu:~/hello_world_devops$ git status
On branch master
Your branch is up to date with 'origin/master'.

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        deploy/systemd/

nothing added to commit but untracked files present (use "git add" to track)
catware@srvubuntu:~/hello_world_devops$ git add deploy/*
catware@srvubuntu:~/hello_world_devops$ git commit -m 'finished deploy'
[master 40699eb] finished deploy
 1 file changed, 18 insertions(+)
 create mode 100644 deploy/systemd/hello.service
catware@srvubuntu:~/hello_world_devops$ git tag v2.0
catware@srvubuntu:~/hello_world_devops$ git push origin master
gEnumerating objects: 7, done.
Counting objects: 100% (7/7), done.
Delta compression using up to 2 threads
Compressing objects: 100% (4/4), done.
Writing objects: 100% (5/5), 665 bytes | 665.00 KiB/s, done.
Total 5 (delta 1), reused 0 (delta 0)
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To https://github.com/summerinstockholm/hello_world_devops.git
   f30b89e..40699eb  master -> master
catware@srvubuntu:~/hello_world_devops$ git push origin v2.0
Total 0 (delta 0), reused 0 (delta 0)
To https://github.com/summerinstockholm/hello_world_devops.git
 * [new tag]         v2.0 -> v2.0
В репозитории на гитхаб появился новый релиз:
https://prnt.sc/Ema_DYe3uPDJ
В итоге все нужные артефакты к деплою подготовлены.
Поскольку инфракод у нас часть репозитория, то изменения в инфракоде тоже двигают версию.
## Во время релиза хотим использовать автоматизированный деплой.
Нужно сделать lxd контейнер который будем настраивать через Ansible.
Устанавливаем lxd
catware@srvubuntu:~/hello_world_devops$ sudo apt install lxd
Запускаем конфигурацию lxd
catware@srvubuntu:~/hello_world_devops$ sudo lxd init
И отвечаем на вопросы
Использовать ли кластер - нет
Создать ли новый storage pool? - да
Имея нового storage pool - default
Какой бекенд будет использоваться dir, lvm, btrfs, zfs, ceph? - будем использовать в виде просто директории на диске т.е. выбираем dir
Будем ли присоединяться к MAAS серверу - нет
Создать ли локальный сетевой бридж для того чтобы туда записывать новые контейнеры - да
Как должен называться новый бридж? Дефолтно lxdbr0? - да, lxdbr0
Какой IPv4 адрес должен использоваться? - дефолтно авто
Какой IPv6 адрес должен использоваться? - дефолтно авто
LXD должно быть доступно из сети? - нет
Нужно ли обновлять автоматически образы операционных систем? - да
Хочешь ли посмотреть свои настройки в виде YAML файла? - нет
Выйдем из системы и зайдем заново, потому что пользователя catware добавили в группу lxd.
Отредактируем profile (дефолтный конфиг с которым будут создаваться контейнера) для того чтобы добавить в него личный открытый ssh ключ минуя в дальнейшем ввод 
логина и пароля
catware@srvubuntu:~$ lxc profile edit default
https://chrismacnaughton.com/blog/uncategorized/adding-ssh-authorized-keys-to-lxd-default-profile/
config:
  user.user-data: |
    #cloud-config
    ssh_authorized_keys:
      - ssh-rsa "ваш публичный ssh ключ" catware
Запускаем контейнер в котором хотим делать тесты:
catware@srvubuntu:~$ lxc launch ubuntu
Установится контейнер с последней версией убунту.
Установим пакет software-properties-common и Ansible
catware@srvubuntu:~$ sudo apt install -y software-properties-common
catware@srvubuntu:~$ sudo apt install ansible
Ansible установлен.
Посмотрим список контейнеров:
catware@srvubuntu:~$ lxc list
+---------------+---------+----------------------+-----------------------------------------------+-----------+-----------+
|     NAME      |  STATE  |         IPV4         |                     IPV6                      |   TYPE    | SNAPSHOTS |
+---------------+---------+----------------------+-----------------------------------------------+-----------+-----------+
| holy-bonefish | RUNNING | 10.146.218.68 (eth0) | fd42:4123:b051:de38:216:3eff:fe64:13cb (eth0) | CONTAINER | 0         |
+---------------+---------+----------------------+-----------------------------------------------+-----------+-----------+
Переходим в директорию с проектом и создаем директорю ansible.
catware@srvubuntu:~$ cd hello_world_devops
catware@srvubuntu:~/hello_world_devops$ mkdir ansible
catware@srvubuntu:~/hello_world_devops$ cd ansible
Создать базовую структорию директорий откуда можно стартовать ansible.
Создадим ansible.cfg и добавим следующие строки:
catware@srvubuntu:~/hello_world_devops/ansible$ sudo nano ansible.cfg
[default]
inventory = hosts
host_key_checking = False
https://prnt.sc/mKmNERigwmTO
inventory = hosts Список хостов которыми будем управлять будет лежать в файле hosts
host_key_checking = False Прошу ansible не проверять ключи когда будем ходим по машинам.
Далее создадим файл hosts в котором укажем ip адрес созданного ранее контейнера и дефолтным логином ubuntu.
сatware@srvubuntu:~/hello_world_devops/ansible$ sudo nano hosts
test ansible_host=10.146.218.68 ansible_user=ubuntu
Выполним команду /bin/bash в созданном ранее контейнере:
catware@srvubuntu:~$ lxc exec holy-bonefish /bin/bash
root@holy-bonefish:~# lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 20.04.4 LTS
Release:        20.04
Codename:       focal
Выйдем из контейнера и вызовем модуль ansible - ping.

